name: 'Terraform Apply on Comment'

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: terraform
  cancel-in-progress: true

jobs:
  terraform-apply:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, 'apply')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure AWS CLI (required for S3 backend)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-southeast-2'

      # Configure Terraform backend with S3
      - name: Configure Terraform Backend
        run: |
          terraform -chdir=infrastructure/terraform init -input=false -backend-config="s3.tfvars"

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=infrastructure/terraform plan -input=false -out=tfplan

      # Apply the changes required to reach the desired state of the configuration
      - name: Terraform Apply
        run: terraform -chdir=infrastructure/terraform apply -auto-approve -input=false tfplan

      # Auto-merge pull request as changes have been applied
      - name: Auto-Merge Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.issue.number;
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              merge_method: 'merge'  # Choose 'merge', 'squash', or 'rebase'
            });
