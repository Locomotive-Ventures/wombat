AWSTemplateFormatVersion: '2010-09-09'
Description: Testing resourses excluding the Caller part

Parameters:
  QueueName:
    Type: String
    Description: The name of the SQS queue
    Default: contact-queue

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${WebsiteBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

# CloudFront setup

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: myS3Origin
            DomainName: !GetAtt [WebsiteBucket, DomainName]
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

# SQS Setup

  ContactQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName

  ContactQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: ContactQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource:
              Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:ContactQueue

# DynamoDB table setup

  ContactTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'contact-table'
      AttributeDefinitions:
        - AttributeName: uniqueId
          AttributeType: S
        - AttributeName: campaignId
          AttributeType: S
      KeySchema:
        - AttributeName: uniqueId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: CampaignIndex
          KeySchema:
            - AttributeName: campaignId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

# Lambda to pick up records from the SQS and add them to Dynamo

  ContactLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ContactLambda}
      RetentionInDays: 7

  ContactLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ContactLambdaExecutionRole.Arn
      Runtime: python3.11
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          dynamodb = boto3.resource('dynamodb')
          def handler(event, context):
              table_name = os.environ['TABLE_NAME']
              table = dynamodb.Table(table_name)
              for record in event['Records']:
                  message_body = json.loads(record['body'])
                  response = table.put_item(Item=message_body)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Messages processed and stored in DynamoDB')
              }
      Environment:
        Variables:
          QUEUE_URL: !Ref ContactQueue
          TABLE_NAME: !Ref ContactTable

  ContactLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ContactTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ContactQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*

  ContactLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ContactQueue.Arn
      FunctionName: !GetAtt ContactLambda.Arn
      Enabled: true
      BatchSize: 1

# API to trigger SQS from CloudFront

  ContactAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'ContactAPI'

  ContactAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: 'ContactAPI'
      ParentId:
        Fn::GetAtt:
          - 'ContactAPI'
          - 'RootResourceId'
      PathPart: 'message'

  ContactAPIOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: 'ContactAPI'
      ResourceId:
        Ref: 'ContactAPIResource'
      HttpMethod: 'OPTIONS'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'MOCK'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ContactAPIMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Ref: 'ContactAPI'
      ResourceId:
        Ref: 'ContactAPIResource'
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}'
        Credentials: !GetAtt 'ContactAPIRole.Arn'
        RequestParameters:
          'integration.request.header.Content-Type': "'application/x-www-form-urlencoded'"
        RequestTemplates:
          'application/json': !Sub |
            Action=SendMessage&MessageBody=$util.urlEncode("$input.body")
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"

  ContactAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ContactAPI
    DependsOn:
      - ContactAPIMethod
      - ContactAPIOptionsMethod

  MyStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "Prod"
      Description: "Production Stage"
      RestApiId:
        Ref: ContactAPI
      DeploymentId:
        Ref: ContactAPIDeployment

  ContactAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ContactAPIPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'sqs:SendMessage'
                Resource:
                  Fn::GetAtt: 'ContactQueue.Arn'

# Lambda to query DynamoDB

  DynamoDBAPILambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBReadOnly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !GetAtt ContactTable.Arn
                  - !Sub "${ContactTable.Arn}/index/CampaignIndex"

  DynamoDBAPILambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt DynamoDBAPILambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          dynamodb = boto3.client('dynamodb')
          table_name = os.environ['TABLE_NAME']
          def handler(event, context):
              campaign_id = event['queryStringParameters']['campaignId']
              if campaign_id == '*':
                  # Query all items without specifying a campaignId
                  response = dynamodb.scan(TableName=table_name)
              else:
                  response = dynamodb.query(
                      TableName=table_name,
                      IndexName='CampaignIndex',
                      KeyConditionExpression='campaignId = :v1',
                      ExpressionAttributeValues={
                          ':v1': {'S': campaign_id}
                      }
                  )
              items = response.get('Items', [])
              formatted_items = [{k: v['S'] for k, v in item.items()} for item in items]
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps(formatted_items)
              }
      Environment:
        Variables:
          TABLE_NAME: !Ref ContactTable
      Runtime: python3.11
      Timeout: 10

  DynamoDBAPILambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DynamoDBAPILambdaFunction}
      RetentionInDays: 7

# API to query trigger Lambda to query data from Dynamo

  DynamoDBAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DynamoDBAPI

  DynamoDBAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DynamoDBAPI
      ParentId: !GetAtt DynamoDBAPI.RootResourceId
      PathPart: 'data'

  DynamoDBAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'DynamoDBAPIPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction' # Add this permission to allow API Gateway to invoke Lambda functions
                Resource:
                  - !GetAtt DynamoDBAPILambdaFunction.Arn

  DynamoDBAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DynamoDBAPI
      ResourceId: !Ref DynamoDBAPIResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS_PROXY'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DynamoDBAPILambdaFunction.Arn}/invocations'
        Credentials: !GetAtt DynamoDBAPIRole.Arn
        IntegrationHttpMethod: 'POST'
        RequestParameters:
          'integration.request.header.Content-Type': "'application/x-www-form-urlencoded'"
        RequestTemplates:
          'application/json': !Sub |
            Action=SendMessage&MessageBody=$util.urlEncode("$input.body")
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  DynamoDBAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref DynamoDBAPI
      Description: 'API Deployment'
    DependsOn: DynamoDBAPIMethod

  DynamoDBAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: 'Prod'
      RestApiId: !Ref DynamoDBAPI
      DeploymentId: !Ref DynamoDBAPIDeployment

Outputs:
  ContactAPIInvokeURL:
    Description: 'Invoke URL of ContactAPI'
    Value:
      Fn::Sub: 'https://${ContactAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/message'
  DynamoDBAPIInvokeURL:
    Description: 'Invoke URL of DynamoDBAPI'
    Value:
      Fn::Sub: 'https://${DynamoDBAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/message'
  WebsiteURL:
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  BucketName:
    Value: !Ref WebsiteBucket
